{"version":3,"sources":["api/client.js","features/notifications/notificationsSlice.js","app/Navbar.js","features/posts/postsSlice.js","features/posts/EditPostForm.js","features/users/usersSlice.js","features/posts/PostAuthor.js","features/posts/TimeAgo.js","features/posts/ReactionButton.js","features/posts/PostsList.js","features/posts/AddPostForm.js","features/posts/SinglePostPage.js","features/users/UsersList.js","features/users/UserPage.js","features/notifications/NotificationsList.js","App.js","api/server.js","app/store.js","index.js"],"names":["client","endpoint","a","body","customConfig","headers","config","method","JSON","stringify","window","fetch","response","json","data","ok","Error","statusText","Promise","reject","message","get","post","notificationsAdapter","createEntityAdapter","sortComparer","b","date","localeCompare","fetchNotifications","createAsyncThunk","_","getState","allNotifications","selectAllNotifications","latestNotification","latestTimestamp","notifications","notificationsSlice","createSlice","name","initialState","getInitialState","reducers","allNotificationsRead","state","action","Object","values","entities","forEach","notification","read","extraReducers","fulfilled","isNew","upsertMany","payload","actions","getSelectors","selectAll","Navbar","unreadNotificationsBadge","dispatch","useDispatch","numUnreadNotifications","useSelector","filter","n","length","className","to","onClick","postsAdapter","status","error","fetchPosts","posts","addNewPost","initialPost","postsSlice","reactionAdded","postId","reaction","existingPost","reactions","postUpdated","id","title","content","pending","rejected","addOne","postAdded","selectAllPosts","selectPostById","selectById","selectPostIds","selectIds","selectPostsByUser","createSelector","userId","user","EditPostForm","match","params","useState","setTitle","setContent","history","useHistory","htmlFor","type","placeholder","value","onChange","e","target","push","usersAdapter","fetchUsers","users","usersSlice","setAll","selectAllUsers","selectUserById","PostAuthor","author","TimeAgo","timestamp","timeAgo","parseISO","timePeriod","formatDistanceToNow","reactionEmoji","thumbsUp","hooray","heart","rocket","eyes","ReactionButtons","reactionButtons","entries","map","emoji","key","PostExcerpt","substring","PostsList","orderedPostIds","postStatus","useEffect","AddPostForm","setUserId","addRequestStatus","setAddRequestStatus","canSave","every","Boolean","onSavePostClicked","resultAction","unwrapResult","console","usersOptions","disabled","SinglePostPage","moment","format","UsersList","renderedUsers","UserPage","postTitles","NotificationsList","renderedNotifications","find","notificationClassname","classnames","new","App","seedDate","exact","path","component","render","Fragment","configureStore","reducer","postsReducer","usersReducer","notificationReducer","IdSerializer","RestSerializer","extend","serializeIds","rng","seedrandom","randomSeedString","localStorage","getItem","getRandomInt","min","max","Math","ceil","floor","Date","toISOString","setItem","setRandom","faker","seed","getTime","randomFromArray","array","notificationTemplates","Server","routes","this","namespace","timing","resource","server","schema","req","normalizedRequestAttrs","create","comments","pastDate","numNotifications","now","queryParams","since","valueOf","setMinutes","getMinutes","Array","db","template","nanoid","between","models","Model","hasMany","belongsTo","comment","factories","Factory","firstName","lastName","findName","username","internet","userName","afterCreate","createList","sentence","recent","article","association","past","text","paragraph","serializers","seeds","store","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ddd43ed1.chunk.js","sourcesContent":["// A tiny wrapper around fetch(), borrowed from\r\n// https://kentcdodds.com/blog/replace-axios-with-a-simple-custom-fetch-wrapper\r\n\r\nexport async function client(endpoint, { body, ...customConfig } = {}) {\r\n  const headers = { 'Content-Type': 'application/json' }\r\n\r\n  const config = {\r\n    method: body ? 'POST' : 'GET',\r\n    ...customConfig,\r\n    headers: {\r\n      ...headers,\r\n      ...customConfig.headers,\r\n    },\r\n  }\r\n\r\n  if (body) {\r\n    config.body = JSON.stringify(body)\r\n  }\r\n\r\n  let data\r\n  try {\r\n    const response = await window.fetch(endpoint, config)\r\n    data = await response.json()\r\n    if (response.ok) {\r\n      return data\r\n    }\r\n    throw new Error(response.statusText)\r\n  } catch (err) {\r\n    return Promise.reject(err.message ? err.message : data)\r\n  }\r\n}\r\n\r\nclient.get = function (endpoint, customConfig = {}) {\r\n  return client(endpoint, { ...customConfig, method: 'GET' })\r\n}\r\n\r\nclient.post = function (endpoint, body, customConfig = {}) {\r\n  return client(endpoint, { ...customConfig, body })\r\n}\r\n","import { createSlice, createAsyncThunk, createEntityAdapter } from '@reduxjs/toolkit'\r\n\r\nimport { client } from '../../api/client'\r\n\r\nconst notificationsAdapter = createEntityAdapter({\r\n    sortComparer: (a, b) => b.date.localeCompare(a.date)\r\n})\r\n\r\nexport const fetchNotifications = createAsyncThunk(\r\n    'notifications/fetchNotifications',\r\n    async (_, { getState }) => {\r\n        const allNotifications = selectAllNotifications(getState())\r\n        const [latestNotification] = allNotifications\r\n        const latestTimestamp = latestNotification ? latestNotification.date : ''\r\n        const response = await client.get(\r\n            `/fakeApi/notifications?since=${latestTimestamp}`\r\n        )\r\n        return response.notifications\r\n    }\r\n)\r\n\r\nconst notificationsSlice = createSlice({\r\n    name: 'notifications',\r\n    initialState: notificationsAdapter.getInitialState(),\r\n    reducers: {\r\n        allNotificationsRead(state, action) {\r\n            Object.values(state.entities).forEach(notification => {\r\n                notification.read = true\r\n            })\r\n        }\r\n    },\r\n    extraReducers: {\r\n        [fetchNotifications.fulfilled]: (state, action) => {\r\n            Object.values(state.entities).forEach(notification => {\r\n                // Any notifications we've read are no longer new\r\n                notification.isNew = !notification.read\r\n            })\r\n            notificationsAdapter.upsertMany(state, action.payload)\r\n        }\r\n    }\r\n})\r\n\r\nexport const { allNotificationsRead } = notificationsSlice.actions\r\n\r\nexport default notificationsSlice.reducer\r\n\r\nexport const { selectAll: selectAllNotifications } =\r\n    notificationsAdapter.getSelectors(state => state.notifications)","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { fetchNotifications, selectAllNotifications } from '../features/notifications/notificationsSlice'\r\n\r\n\r\nexport const Navbar = () => {\r\n\r\n  const dispatch = useDispatch()\r\n  const notifications = useSelector(selectAllNotifications)\r\n  const numUnreadNotifications = notifications.filter(n => !n.read).length\r\n  const fetchNewNotifications = () => {\r\n    dispatch(fetchNotifications())\r\n  }\r\n\r\n  let unreadNotificationsBadge\r\n\r\n  if (numUnreadNotifications > 0) {\r\n    unreadNotificationsBadge = (\r\n      <span className=\"badge\">{numUnreadNotifications}</span>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <nav>\r\n      <section>\r\n        <h1>My React Redux Demo</h1>\r\n\r\n        <div className=\"navContent\">\r\n          <div className=\"navLinks\">\r\n            <Link to=\"/\">Posts</Link>\r\n            <Link to=\"/users\">Users</Link>\r\n            <Link to=\"/notifications\">\r\n              Notifications {unreadNotificationsBadge}\r\n            </Link>\r\n          </div>\r\n          <button className=\"button\" onClick={fetchNewNotifications}>\r\n            Refresh Notifications\r\n          </button>\r\n\r\n        </div>\r\n      </section>\r\n    </nav>\r\n  )\r\n}\r\n","import {\r\n    createSlice,\r\n    createAsyncThunk,\r\n    createSelector,\r\n    createEntityAdapter,\r\n} from '@reduxjs/toolkit'\r\nimport { client } from '../../api/client'\r\n\r\nconst postsAdapter = createEntityAdapter({\r\n    sortComparer: (a, b) => b.date.localeCompare(a.date),\r\n})\r\n\r\nconst initialState = postsAdapter.getInitialState({\r\n    status: 'idle',\r\n    error: null,\r\n})\r\n\r\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\r\n    const response = await client.get('/fakeApi/posts')\r\n    return response.posts\r\n})\r\n\r\nexport const addNewPost = createAsyncThunk(\r\n    'posts/addNewPost',\r\n    async (initialPost) => {\r\n        const response = await client.post('/fakeApi/posts', { post: initialPost })\r\n        return response.post\r\n    }\r\n)\r\n\r\nconst postsSlice = createSlice({\r\n    name: 'posts',\r\n    initialState,\r\n    reducers: {\r\n        reactionAdded(state, action) {\r\n            const { postId, reaction } = action.payload\r\n            const existingPost = state.entities[postId]\r\n            if (existingPost) {\r\n                existingPost.reactions[reaction]++\r\n            }\r\n        },\r\n        postUpdated(state, action) {\r\n            const { id, title, content } = action.payload\r\n            const existingPost = state.entities[id]\r\n            if (existingPost) {\r\n                existingPost.title = title\r\n                existingPost.content = content\r\n            }\r\n        },\r\n    },\r\n    extraReducers: {\r\n        [fetchPosts.pending]: (state, action) => {\r\n            state.status = 'loading'\r\n        },\r\n        [fetchPosts.fulfilled]: (state, action) => {\r\n            state.status = 'succeeded'\r\n            // Add any fetched posts to the array\r\n            postsAdapter.upsertMany(state, action.payload)\r\n        },\r\n        [fetchPosts.rejected]: (state, action) => {\r\n            state.status = 'failed'\r\n            state.error = action.payload\r\n        },\r\n        [addNewPost.fulfilled]: postsAdapter.addOne,\r\n    },\r\n})\r\n\r\nexport const { postAdded, postUpdated, reactionAdded } = postsSlice.actions\r\n\r\nexport default postsSlice.reducer\r\n\r\nexport const {\r\n    selectAll: selectAllPosts,\r\n    selectById: selectPostById,\r\n    selectIds: selectPostIds,\r\n} = postsAdapter.getSelectors((state) => state.posts)\r\n\r\nexport const selectPostsByUser = createSelector(\r\n    [selectAllPosts, (state, userId) => userId],\r\n    (posts, userId) => posts.filter((post) => post.user === userId)\r\n)\r\n","import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nimport { postUpdated, selectPostById } from './postsSlice'\r\n\r\nexport const EditPostForm = ({ match }) => {\r\n    const { postId } = match.params\r\n\r\n    const post = useSelector(state => selectPostById(state, postId))\r\n\r\n    const [title, setTitle] = useState(post.title)\r\n    const [content, setContent] = useState(post.content)\r\n\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    const onTitleChanged = e => setTitle(e.target.value)\r\n    const onContentChanged = e => setContent(e.target.value)\r\n\r\n    const onSavePostClicked = () => {\r\n        if (title && content) {\r\n            dispatch(postUpdated({ id: postId, title, content }))\r\n            history.push(`/posts/${postId}`)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <section>\r\n            <h2>Edit Post</h2>\r\n            <form>\r\n                <label htmlFor=\"postTitle\">Post Title:</label>\r\n                <input\r\n                    type=\"text\"\r\n                    id=\"postTitle\"\r\n                    name=\"postTitle\"\r\n                    placeholder=\"What's on your mind?\"\r\n                    value={title}\r\n                    onChange={onTitleChanged}\r\n                />\r\n                <label htmlFor=\"postContent\">Content:</label>\r\n                <textarea\r\n                    id=\"postContent\"\r\n                    name=\"postContent\"\r\n                    value={content}\r\n                    onChange={onContentChanged}\r\n                />\r\n            </form>\r\n            <button type=\"button\" onClick={onSavePostClicked}>\r\n                Save Post\r\n            </button>\r\n        </section>\r\n    )\r\n}","\r\nimport {\r\n    createSlice,\r\n    createAsyncThunk,\r\n    createEntityAdapter,\r\n} from '@reduxjs/toolkit'\r\nimport { client } from '../../api/client'\r\n\r\nconst usersAdapter = createEntityAdapter()\r\n\r\nconst initialState = usersAdapter.getInitialState()\r\n\r\nexport const fetchUsers = createAsyncThunk('users/fetchUsers', async () => {\r\n    const response = await client.get('/fakeApi/users')\r\n    return response.users\r\n})\r\n\r\nconst usersSlice = createSlice({\r\n    name: 'users',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: {\r\n        [fetchUsers.fulfilled]: usersAdapter.setAll,\r\n    },\r\n})\r\n\r\nexport default usersSlice.reducer\r\n\r\nexport const {\r\n    selectAll: selectAllUsers,\r\n    selectById: selectUserById,\r\n} = usersAdapter.getSelectors((state) => state.users)\r\n","\r\nimport React from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport { selectUserById } from '../users/usersSlice'\r\n\r\nexport const PostAuthor = ({ userId }) => {\r\n    const author = useSelector((state) => selectUserById(state, userId))\r\n\r\n    return <span>by {author ? author.name : 'Unknown author'}</span>\r\n}\r\n","import React from 'react'\r\nimport { parseISO, formatDistanceToNow } from 'date-fns'\r\n\r\nexport const TimeAgo = ({ timestamp }) => {\r\n    let timeAgo = ''\r\n    if (timestamp) {\r\n        const date = parseISO(timestamp)\r\n        let timePeriod = formatDistanceToNow(date)\r\n        timeAgo = `${timePeriod} ago`\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <span title={timestamp}>\r\n            <i> ({timeAgo})</i>\r\n        </span>\r\n    )\r\n}","import React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\n\r\nimport { reactionAdded } from './postsSlice'\r\n\r\nconst reactionEmoji = {\r\n    thumbsUp: '👍',\r\n    hooray: '🎉',\r\n    heart: '❤️',\r\n    rocket: '🚀',\r\n    eyes: '👀'\r\n}\r\n\r\nexport const ReactionButtons = ({ post }) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const reactionButtons = Object.entries(reactionEmoji).map(([name, emoji]) => {\r\n        return (\r\n            <button\r\n                key={name}\r\n                type=\"button\"\r\n                className=\"muted-button reaction-button\"\r\n                onClick={() =>\r\n                    dispatch(reactionAdded({ postId: post.id, reaction: name }))\r\n                }\r\n            >\r\n                {emoji} {post.reactions[name]}\r\n            </button>\r\n        )\r\n    })\r\n\r\n    return <div>{reactionButtons}</div>\r\n}","// \r\nimport React, { useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { PostAuthor } from './PostAuthor'\r\nimport { TimeAgo } from './TimeAgo'\r\nimport { ReactionButtons } from './ReactionButton'\r\nimport {\r\n    selectAllPosts,\r\n    fetchPosts,\r\n    selectPostIds,\r\n    selectPostById,\r\n} from './postsSlice'\r\n\r\nlet PostExcerpt = ({ postId }) => {\r\n    const post = useSelector((state) => selectPostById(state, postId))\r\n\r\n    return (\r\n        <article className=\"post-excerpt\" key={post.id}>\r\n            <h3>{post.title}</h3>\r\n            <div>\r\n                <PostAuthor userId={post.user} />\r\n                <TimeAgo timestamp={post.date} />\r\n            </div>\r\n            <p className=\"post-content\">{post.content.substring(0, 100)}</p>\r\n\r\n            <ReactionButtons post={post} />\r\n            <Link to={`/posts/${post.id}`} className=\"button muted-button\">\r\n                View Post\r\n            </Link>\r\n        </article>\r\n    )\r\n}\r\n\r\nexport const PostsList = () => {\r\n    const dispatch = useDispatch()\r\n    const orderedPostIds = useSelector(selectPostIds)\r\n\r\n    const postStatus = useSelector((state) => state.posts.status)\r\n    const error = useSelector((state) => state.posts.error)\r\n\r\n    useEffect(() => {\r\n        if (postStatus === 'idle') {\r\n            dispatch(fetchPosts())\r\n        }\r\n    }, [postStatus, dispatch])\r\n\r\n    let content\r\n\r\n    if (postStatus === 'loading') {\r\n        content = <div className=\"loader\">Loading...</div>\r\n    } else if (postStatus === 'succeeded') {\r\n        content = orderedPostIds.map((postId) => (\r\n            <PostExcerpt key={postId} postId={postId} />\r\n        ))\r\n    } else if (postStatus === 'error') {\r\n        content = <div>{error}</div>\r\n    }\r\n\r\n    return (\r\n        <section className=\"posts-list\">\r\n            <h2>Posts</h2>\r\n            {content}\r\n        </section>\r\n    )\r\n}\r\n","\r\nimport React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { unwrapResult } from '@reduxjs/toolkit'\r\n\r\nimport { addNewPost } from './postsSlice'\r\nimport { selectAllUsers } from '../users/usersSlice'\r\n\r\nexport const AddPostForm = () => {\r\n    const [title, setTitle] = useState('')\r\n    const [content, setContent] = useState('')\r\n    const [userId, setUserId] = useState('')\r\n    const [addRequestStatus, setAddRequestStatus] = useState('idle')\r\n\r\n    const dispatch = useDispatch()\r\n    const users = useSelector(selectAllUsers)\r\n\r\n    const onTitleChanged = (e) => setTitle(e.target.value)\r\n    const onContentChanged = (e) => setContent(e.target.value)\r\n    const onAuthorChanged = (e) => setUserId(e.target.value)\r\n\r\n    const canSave =\r\n        [title, content, userId].every(Boolean) && addRequestStatus === 'idle'\r\n\r\n    const onSavePostClicked = async () => {\r\n        if (canSave) {\r\n            try {\r\n                setAddRequestStatus('pending')\r\n                const resultAction = await dispatch(\r\n                    addNewPost({ title, content, user: userId })\r\n                )\r\n                unwrapResult(resultAction)\r\n                setTitle('')\r\n                setContent('')\r\n                setUserId('')\r\n            } catch (err) {\r\n                console.error('Failed to save the post: ', err)\r\n            } finally {\r\n                setAddRequestStatus('idle')\r\n            }\r\n        }\r\n    }\r\n\r\n    const usersOptions = users.map((user) => (\r\n        <option key={user.id} value={user.id}>\r\n            {user.name}\r\n        </option>\r\n    ))\r\n\r\n    return (\r\n        <section>\r\n            <h2>Add a New Post</h2>\r\n            <form>\r\n                <label htmlFor=\"postTitle\">Post Title:</label>\r\n                <input\r\n                    type=\"text\"\r\n                    id=\"postTitle\"\r\n                    name=\"postTitle\"\r\n                    placeholder=\"What's on your mind?\"\r\n                    value={title}\r\n                    onChange={onTitleChanged}\r\n                />\r\n                <label htmlFor=\"postAuthor\">Author:</label>\r\n                <select id=\"postAuthor\" value={userId} onChange={onAuthorChanged}>\r\n                    <option value=\"\"></option>\r\n                    {usersOptions}\r\n                </select>\r\n                <label htmlFor=\"postContent\">Content:</label>\r\n                <textarea\r\n                    id=\"postContent\"\r\n                    name=\"postContent\"\r\n                    value={content}\r\n                    onChange={onContentChanged}\r\n                />\r\n                <button type=\"button\" onClick={onSavePostClicked} disabled={!canSave}>\r\n                    Save Post\r\n                </button>\r\n            </form>\r\n        </section>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { PostAuthor } from './PostAuthor'\r\nimport moment from 'moment'\r\nimport { TimeAgo } from './TimeAgo'\r\nimport { ReactionButtons } from './ReactionButton'\r\nimport { selectPostById } from './postsSlice'\r\n\r\nexport const SinglePostPage = ({ match }) => {\r\n    const { postId } = match.params\r\n\r\n    const post = useSelector(state => selectPostById(state, postId))\r\n\r\n    const date = moment(post.date).format('MMMM Do YYYY, h:mm:ss a')\r\n\r\n    if (!post) {\r\n        return (\r\n            <section>\r\n                <h2>Post not found!</h2>\r\n            </section>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <section>\r\n            <article className=\"post\">\r\n                <h2>{post.title}</h2>\r\n                <p>{date} &nbsp;(<TimeAgo timestamp={post.date} />)</p>\r\n                <PostAuthor userId={post.user} />\r\n                <p className=\"post-content\">{post.content}</p>\r\n                <ReactionButtons post={post} />\r\n                <br />\r\n                <Link to={`/editPost/${post.id}`} className=\"button\">\r\n                    Edit Post\r\n                </Link>\r\n            </article>\r\n        </section>\r\n    )\r\n}","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { selectAllUsers } from './usersSlice'\r\n\r\nexport const UsersList = () => {\r\n    const users = useSelector(selectAllUsers)\r\n\r\n    const renderedUsers = users.map(user => (\r\n        <li key={user.id}>\r\n            <Link to={`/users/${user.id}`}>{user.name}</Link>\r\n        </li>\r\n    ))\r\n\r\n    return (\r\n        <section>\r\n            <h2>Users</h2>\r\n\r\n            <ul>{renderedUsers}</ul>\r\n        </section>\r\n    )\r\n}","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { selectUserById } from '../users/usersSlice'\r\nimport { selectAllPosts, selectPostsByUser } from '../posts/postsSlice'\r\n\r\nexport const UserPage = ({ match }) => {\r\n    const { userId } = match.params\r\n\r\n    const user = useSelector(state => selectUserById(state, userId))\r\n\r\n    const postsForUser = useSelector(state => selectPostsByUser(state, userId))\r\n\r\n    const postTitles = postsForUser.map(post => (\r\n        <li key={post.id}>\r\n            <Link to={`/posts/${post.id}`}>{post.title}</Link>\r\n        </li>\r\n    ))\r\n\r\n    return (\r\n        <section>\r\n            <h2>{user.name}</h2>\r\n\r\n            <ul>{postTitles}</ul>\r\n        </section>\r\n    )\r\n}","import React, { useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { formatDistanceToNow, parseISO } from 'date-fns'\r\nimport classnames from 'classnames'\r\n\r\nimport { selectAllUsers } from '../users/usersSlice'\r\n\r\nimport { selectAllNotifications, allNotificationsRead } from './notificationsSlice'\r\n\r\n\r\nexport const NotificationsList = () => {\r\n    const dispatch = useDispatch()\r\n    const notifications = useSelector(selectAllNotifications)\r\n    const users = useSelector(selectAllUsers)\r\n\r\n    useEffect(() => {\r\n        dispatch(allNotificationsRead())\r\n    })\r\n\r\n    const renderedNotifications = notifications.map(notification => {\r\n        const date = parseISO(notification.date)\r\n        const timeAgo = formatDistanceToNow(date)\r\n        const user = users.find(user => user.id === notification.user) || {\r\n            name: 'Unknown User'\r\n        }\r\n\r\n        const notificationClassname = classnames('notification', {\r\n            new: notification.isNew\r\n        })\r\n\r\n        return (\r\n            <div key={notification.id} className={notificationClassname}>\r\n                <div>\r\n                    <b>{user.name}</b> {notification.message}\r\n                </div>\r\n                <div title={notification.date}>\r\n                    <i>{timeAgo} ago</i>\r\n                </div>\r\n            </div>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <section className=\"notificationsList\">\r\n            <h2>Notifications</h2>\r\n            {renderedNotifications}\r\n        </section>\r\n    )\r\n}","import React from 'react'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect\r\n} from 'react-router-dom'\r\n\r\nimport { Navbar } from './app/Navbar'\r\nimport { EditPostForm } from './features/posts/EditPostForm'\r\nimport { PostsList } from './features/posts/PostsList'\r\nimport { AddPostForm } from './features/posts/AddPostForm'\r\nimport { SinglePostPage } from './features/posts/SinglePostPage'\r\nimport { UsersList } from './features/users/UsersList'\r\nimport { UserPage } from './features/users/UserPage'\r\nimport { NotificationsList } from './features/notifications/NotificationsList'\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Navbar />\r\n      <div className=\"App\">\r\n        <Switch>\r\n          <Route exact path=\"/notifications\" component={NotificationsList} />\r\n          <Route\r\n            exact\r\n            path=\"/\"\r\n            render={() => (\r\n              <React.Fragment>\r\n                <AddPostForm />\r\n                <PostsList />\r\n              </React.Fragment>\r\n            )}\r\n          />\r\n          <Route exact path=\"/posts/:postId\" component={SinglePostPage} />\r\n          <Route exact path=\"/editPost/:postId\" component={EditPostForm} />\r\n          <Route exact path=\"/users\" component={UsersList} />\r\n          <Route exact path=\"/users/:userId\" component={UserPage} />\r\n          <Redirect to=\"/\" />\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default App","import {\r\n  Server,\r\n  Model,\r\n  Factory,\r\n  belongsTo,\r\n  hasMany,\r\n  association,\r\n  RestSerializer,\r\n} from 'miragejs'\r\n\r\nimport { nanoid } from '@reduxjs/toolkit'\r\n\r\nimport faker from 'faker'\r\nimport { sentence, paragraph, article, setRandom } from 'txtgen'\r\nimport { parseISO } from 'date-fns'\r\nimport seedrandom from 'seedrandom'\r\n\r\nconst IdSerializer = RestSerializer.extend({\r\n  serializeIds: 'always',\r\n})\r\n\r\n// Set up a seeded random number generator, so that we get\r\n// a consistent set of users / entries each time the page loads.\r\n// This can be reset by deleting this localStorage value,\r\n// or turned off by setting `useSeededRNG` to false.\r\nlet useSeededRNG = true\r\n\r\nlet rng = seedrandom()\r\n\r\nif (useSeededRNG) {\r\n  let randomSeedString = localStorage.getItem('randomTimestampSeed')\r\n  let seedDate\r\n\r\n  if (randomSeedString) {\r\n    seedDate = new Date(randomSeedString)\r\n  } else {\r\n    seedDate = new Date()\r\n    randomSeedString = seedDate.toISOString()\r\n    localStorage.setItem('randomTimestampSeed', randomSeedString)\r\n  }\r\n\r\n  rng = seedrandom(randomSeedString)\r\n  setRandom(rng)\r\n  faker.seed(seedDate.getTime())\r\n}\r\n\r\nfunction getRandomInt(min, max) {\r\n  min = Math.ceil(min)\r\n  max = Math.floor(max)\r\n  return Math.floor(rng() * (max - min + 1)) + min\r\n}\r\n\r\nconst randomFromArray = (array) => {\r\n  const index = getRandomInt(0, array.length - 1)\r\n  return array[index]\r\n}\r\n\r\nconst notificationTemplates = [\r\n  'poked you',\r\n  'says hi!',\r\n  `is glad we're friends`,\r\n  'sent you a gift',\r\n]\r\n\r\nnew Server({\r\n  routes() {\r\n    this.namespace = 'fakeApi'\r\n    this.timing = 1000\r\n\r\n    this.resource('users')\r\n    this.resource('posts')\r\n    this.resource('comments')\r\n\r\n    const server = this\r\n\r\n    this.post('/posts', function (schema, req) {\r\n      const data = this.normalizedRequestAttrs()\r\n      data.date = new Date().toISOString()\r\n      const user = schema.users.find(data.userId)\r\n      data.user = user\r\n\r\n      if (data.content === 'error') {\r\n        throw new Error('Could not save the post!')\r\n      }\r\n\r\n      const result = server.create('post', data)\r\n      return result\r\n    })\r\n\r\n    this.get('/posts/:postId/comments', (schema, req) => {\r\n      const post = schema.posts.find(req.params.postId)\r\n      return post.comments\r\n    })\r\n\r\n    this.get('/notifications', (schema, req) => {\r\n      const numNotifications = getRandomInt(1, 5)\r\n\r\n      let pastDate\r\n\r\n      const now = new Date()\r\n\r\n      if (req.queryParams.since) {\r\n        pastDate = parseISO(req.queryParams.since)\r\n      } else {\r\n        pastDate = new Date(now.valueOf())\r\n        pastDate.setMinutes(pastDate.getMinutes() - 15)\r\n      }\r\n\r\n      // Create N random notifications. We won't bother saving these\r\n      // in the DB - just generate a new batch and return them.\r\n      const notifications = [...Array(numNotifications)].map(() => {\r\n        const user = randomFromArray(schema.db.users)\r\n        const template = randomFromArray(notificationTemplates)\r\n        return {\r\n          id: nanoid(),\r\n          date: faker.date.between(pastDate, now).toISOString(),\r\n          message: template,\r\n          user: user.id,\r\n          read: false,\r\n          isNew: true,\r\n        }\r\n      })\r\n\r\n      return { notifications }\r\n    })\r\n  },\r\n  models: {\r\n    user: Model.extend({\r\n      posts: hasMany(),\r\n    }),\r\n    post: Model.extend({\r\n      user: belongsTo(),\r\n      comments: hasMany(),\r\n    }),\r\n    comment: Model.extend({\r\n      post: belongsTo(),\r\n    }),\r\n    notification: Model.extend({}),\r\n  },\r\n  factories: {\r\n    user: Factory.extend({\r\n      id() {\r\n        return nanoid()\r\n      },\r\n      firstName() {\r\n        return faker.name.firstName()\r\n      },\r\n      lastName() {\r\n        return faker.name.lastName()\r\n      },\r\n      name() {\r\n        return faker.name.findName(this.firstName, this.lastName)\r\n      },\r\n      username() {\r\n        return faker.internet.userName(this.firstName, this.lastName)\r\n      },\r\n\r\n      afterCreate(user, server) {\r\n        server.createList('post', 3, { user })\r\n      },\r\n    }),\r\n    post: Factory.extend({\r\n      id() {\r\n        return nanoid()\r\n      },\r\n      title() {\r\n        return sentence()\r\n      },\r\n      date() {\r\n        return faker.date.recent(7)\r\n      },\r\n      content() {\r\n        return article(1)\r\n      },\r\n      reactions() {\r\n        return {\r\n          thumbsUp: 0,\r\n          hooray: 0,\r\n          heart: 0,\r\n          rocket: 0,\r\n          eyes: 0,\r\n        }\r\n      },\r\n      afterCreate(post, server) {\r\n        //server.createList('comment', 3, { post })\r\n      },\r\n\r\n      user: association(),\r\n    }),\r\n    comment: Factory.extend({\r\n      id() {\r\n        return nanoid()\r\n      },\r\n      date() {\r\n        return faker.date.past(2)\r\n      },\r\n      text() {\r\n        return paragraph()\r\n      },\r\n      post: association(),\r\n    }),\r\n  },\r\n  serializers: {\r\n    user: IdSerializer,\r\n    post: IdSerializer,\r\n    comment: IdSerializer,\r\n  },\r\n  seeds(server) {\r\n    server.createList('user', 3)\r\n  },\r\n})\r\n","import { configureStore } from '@reduxjs/toolkit'\r\n\r\nimport postsReducer from '../features/posts/postsSlice'\r\nimport usersReducer from '../features/users/usersSlice'\r\nimport notificationReducer from '../features/notifications/notificationsSlice'\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    posts: postsReducer,\r\n    users: usersReducer,\r\n    notifications: notificationReducer,\r\n  }\r\n})","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport store from './app/store'\r\nimport { Provider } from 'react-redux'\r\n\r\nimport './api/server'\r\n\r\nimport { fetchUsers } from './features/users/usersSlice'\r\n\r\nstore.dispatch(fetchUsers())\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}